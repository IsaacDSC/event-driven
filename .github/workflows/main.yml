name: Go CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23

      - name: Install dependencies
        run: go mod download

  test:
    runs-on: ubuntu-latest
    needs: setup

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: event-driven
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U root"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23

      - name: Run tests
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: event-driven
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          REDIS_ADDR: localhost:6379
        run: go test ./...

  build:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23

      - name: Build application
        run: go build -v ./...

  release:
    needs: [ test, build ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "tag=v0.1.0" >> $GITHUB_OUTPUT
          else
            major=$(echo $latest_tag | cut -d. -f1)
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_patch=$((patch + 1))
            echo "tag=$major.$minor.$new_patch" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          body: |
            # Release Notes
            
            ## What's Changed
            ${{ github.event.head_commit.message }}
            
            For full changes, see the [commits](https://github.com/${{ github.repository }}/commits/${{ steps.get_tag.outputs.tag }})
          draft: false
          prerelease: false