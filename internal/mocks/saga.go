// Code generated by MockGen. DO NOT EDIT.
// Source: ./types/saga.go
//
// Generated by this command:
//
//	mockgen -source=./types/saga.go -destination=internal/mocks/saga.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	types "event-driven/types"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConsumerInput is a mock of ConsumerInput interface.
type MockConsumerInput struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerInputMockRecorder
	isgomock struct{}
}

// MockConsumerInputMockRecorder is the mock recorder for MockConsumerInput.
type MockConsumerInputMockRecorder struct {
	mock *MockConsumerInput
}

// NewMockConsumerInput creates a new mock instance.
func NewMockConsumerInput(ctrl *gomock.Controller) *MockConsumerInput {
	mock := &MockConsumerInput{ctrl: ctrl}
	mock.recorder = &MockConsumerInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerInput) EXPECT() *MockConsumerInputMockRecorder {
	return m.recorder
}

// DownFn mocks base method.
func (m *MockConsumerInput) DownFn(ctx context.Context, payload types.PayloadInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownFn", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownFn indicates an expected call of DownFn.
func (mr *MockConsumerInputMockRecorder) DownFn(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownFn", reflect.TypeOf((*MockConsumerInput)(nil).DownFn), ctx, payload)
}

// GetConfig mocks base method.
func (m *MockConsumerInput) GetConfig() types.Opts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(types.Opts)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConsumerInputMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConsumerInput)(nil).GetConfig))
}

// GetEventName mocks base method.
func (m *MockConsumerInput) GetEventName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEventName indicates an expected call of GetEventName.
func (mr *MockConsumerInputMockRecorder) GetEventName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventName", reflect.TypeOf((*MockConsumerInput)(nil).GetEventName))
}

// UpFn mocks base method.
func (m *MockConsumerInput) UpFn(ctx context.Context, payload types.PayloadInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpFn", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpFn indicates an expected call of UpFn.
func (mr *MockConsumerInputMockRecorder) UpFn(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpFn", reflect.TypeOf((*MockConsumerInput)(nil).UpFn), ctx, payload)
}
