// Code generated by MockGen. DO NOT EDIT.
// Source: ./types/publisher.go
//
// Generated by this command:
//
//	mockgen -source=./types/publisher.go -destination=internal/mocks/publisher.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	types "github.com/IsaacDSC/event-driven/types"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// GenerateEventID mocks base method.
func (m *MockProducer) GenerateEventID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEventID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GenerateEventID indicates an expected call of GenerateEventID.
func (mr *MockProducerMockRecorder) GenerateEventID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEventID", reflect.TypeOf((*MockProducer)(nil).GenerateEventID))
}

// Producer mocks base method.
func (m *MockProducer) Producer(ctx context.Context, input types.PayloadType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Producer", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Producer indicates an expected call of Producer.
func (mr *MockProducerMockRecorder) Producer(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Producer", reflect.TypeOf((*MockProducer)(nil).Producer), ctx, input)
}
