// Code generated by MockGen. DO NOT EDIT.
// Source: ./types/acl.go
//
// Generated by this command:
//
//	mockgen -source=./types/acl.go -destination=internal/mocks/acl.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	types "github.com/IsaacDSC/event-driven/types"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// SagaSaveTx mocks base method.
func (m *MockRepository) SagaSaveTx(ctx context.Context, input types.PayloadType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SagaSaveTx", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SagaSaveTx indicates an expected call of SagaSaveTx.
func (mr *MockRepositoryMockRecorder) SagaSaveTx(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SagaSaveTx", reflect.TypeOf((*MockRepository)(nil).SagaSaveTx), ctx, input)
}

// SagaUpdateInfos mocks base method.
func (m *MockRepository) SagaUpdateInfos(ctx context.Context, txID uuid.UUID, retry int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SagaUpdateInfos", ctx, txID, retry, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SagaUpdateInfos indicates an expected call of SagaUpdateInfos.
func (mr *MockRepositoryMockRecorder) SagaUpdateInfos(ctx, txID, retry, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SagaUpdateInfos", reflect.TypeOf((*MockRepository)(nil).SagaUpdateInfos), ctx, txID, retry, status)
}

// SaveTx mocks base method.
func (m *MockRepository) SaveTx(ctx context.Context, input types.PayloadType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTx", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTx indicates an expected call of SaveTx.
func (mr *MockRepositoryMockRecorder) SaveTx(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTx", reflect.TypeOf((*MockRepository)(nil).SaveTx), ctx, input)
}

// UpdateInfos mocks base method.
func (m *MockRepository) UpdateInfos(ctx context.Context, txID uuid.UUID, retry int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfos", ctx, txID, retry, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfos indicates an expected call of UpdateInfos.
func (mr *MockRepositoryMockRecorder) UpdateInfos(ctx, txID, retry, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfos", reflect.TypeOf((*MockRepository)(nil).UpdateInfos), ctx, txID, retry, status)
}
